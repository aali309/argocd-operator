# This step verifies that RoleBindings are created by the operator
# We don't create them manually - the operator should create them

# Step 2: Verify that ArgoCD CR is created successfully with long namespaces
# This step just verifies the CR exists - RoleBinding verification can be done separately

apiVersion: kuttl.dev/v1beta1
kind: TestStep
testScript: |
  #!/bin/bash
  set -e

  echo "🔍 Waiting for ArgoCD status.phase to become Available..."

  # Wait for ArgoCD to become Available
  for i in {1..30}; do
    phase=$(kubectl get argocd argocd-long-namespace -n argocd-long-namespace-test -o jsonpath='{.status.phase}')
    echo "  Attempt $i: Current phase: $phase"
    if [ "$phase" == "Available" ]; then
      echo "✅ ArgoCD is Available."
      break
    fi
    if [ $i -eq 30 ]; then
      echo "❌ Timed out waiting for ArgoCD to become Available"
      exit 1
    fi
    sleep 10
  done

  echo "Testing GITOPS-7018 fix: RoleBinding name truncation..."

  # Wait a bit more for RoleBindings to be created
  sleep 30

  # Test that RoleBindings are created successfully
  echo "✓ Step 1: Verifying RoleBindings are created without errors..."

  NAMESPACE1="grp-bk-time-deposit-servicing-activity-topic-streaming-12345678"
  NAMESPACE2="this-is-an-extremely-long-namespace-name-that-exceeds-limit"

  # Check both namespaces have RoleBindings
  rb1_count=$(kubectl get rolebindings -n "$NAMESPACE1" --no-headers 2>/dev/null | wc -l)
  rb2_count=$(kubectl get rolebindings -n "$NAMESPACE2" --no-headers 2>/dev/null | wc -l)

  if [ "$rb1_count" -gt 0 ] && [ "$rb2_count" -gt 0 ]; then
    echo "✓ RoleBindings created successfully in both namespaces"
  else
    echo "✗ RoleBindings not found - reconciliation may have failed"
    exit 1
  fi

  # Test that RoleBinding names are exactly 63 characters (our truncation fix)
  echo "✓ Step 2: Verifying RoleBinding names are exactly 63 characters..."

  for ns in "$NAMESPACE1" "$NAMESPACE2"; do
    echo "Checking namespace: $ns"
    kubectl get rolebindings -n "$ns" -o custom-columns=NAME:.metadata.name --no-headers | while read name; do
      length=${#name}
      echo "  RoleBinding: $name (length: $length)"
      if [ "$length" -eq 63 ]; then
        echo "    ✓ Name is exactly 63 characters (truncation working)"
      else
        echo "    ✗ Name is not 63 characters: $length"
        exit 1
      fi
    done
  done

  # Test that different namespaces produce different truncated names (hash uniqueness)
  echo "✓ Step 3: Verifying hash uniqueness..."

  rb1_names=$(kubectl get rolebindings -n "$NAMESPACE1" -o jsonpath='{.items[*].metadata.name}')
  rb2_names=$(kubectl get rolebindings -n "$NAMESPACE2" -o jsonpath='{.items[*].metadata.name}')

  if [ "$rb1_names" != "$rb2_names" ]; then
    echo "✓ Different namespaces produce different truncated names"
  else
    echo "✗ Namespaces produce same truncated names - hash not unique"
    exit 1
  fi

  echo "✓ GITOPS-7018 fix is working correctly!"
  echo "✓ RoleBindings created successfully with proper name truncation"
